/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */

package io.swagger.client.model

import io.swagger.client.core.ApiModel
import org.joda.time.DateTime
import java.util.UUID

case class CreditorClaimSearchResultBase (
  /* Concatenation of estate number and estate name */
  estate: Option[String],
  estates: Option[Link],
  /* The claim to which the price of evidence belongs / supports.  */
  claimId: Option[Double],
  /* The creditor's reference  */
  reference: Option[String],
  /* The name of the creditor. Where the onBehalfOf field is populated, this feild is to be contactenated  */
  creditorName: Option[String],
  /* The claim registration that generated the claim.  */
  claimRegistrationId: Option[String],
  /* Needs to be captured in a new field coming from the initial claim registration ONC_POTENTIAL_ONLINE_CLAIMS  */
  claimRegistrationType: Option[CreditorClaimSearchResultBaseEnums.ClaimRegistrationType],
  /* The type of claim  */
  claimType: Option[CreditorClaimSearchResultBaseEnums.ClaimType],
  /* The name of the individual that created the claim. */
  createdBy: Option[String],
  /* The date the claim was created. */
  createdOn: Option[Date],
  /* Boolean indicating whether the claim has a joint estate. */
  jointEstate: Option[Boolean],
  /* Boolean indicating whether the claim is an SIO claim */
  sio: Option[Boolean],
  /* Dividends paid to date. */
  dividend: Option[Double],
  /* The submitted value of the claim. */
  claimValue: Option[Double],
  /* The currency (code) if the claim. Loosely mapped to the ISO4217 country codes. Currently updated infrequently. Valid values can be retrived from the /references resource  */
  claimCurrency: Option[String],
  /* Claim value as entered by ITS */
  admittedValue: Option[Double],
  claimStatus: Option[CreditorClaimSearchResultBaseEnums.ClaimStatus],
  links: Option[Link]
) extends ApiModel

object CreditorClaimSearchResultBaseEnums {

  type ClaimRegistrationType = ClaimRegistrationType.Value
  type ClaimType = ClaimType.Value
  type ClaimStatus = ClaimStatus.Value
  object ClaimRegistrationType extends Enumeration {
    val CourtAwardedYouAdjudicationapplicationCosts = Value("Court awarded you adjudication/application costs")
    val ClaimForWagesHolidayPayOrRedundancy = Value("Claim for wages, holiday pay or redundancy")
    val Other = Value("Other")
    val SecuredDebt = Value("Secured debt")
    val CourtAction = Value("Court action")
    val InterestAwardedByACourtOrAgreedToInAContract = Value("Interest awarded by a Court or agreed to in a contract")
  }

  object ClaimType extends Enumeration {
    val Bankrupt = Value("Bankrupt")
    val ChattelSecurity = Value("Chattel Security")
    val Contributory = Value("Contributory")
    val DebentureInterest = Value("Debenture interest")
    val DeferredDebtCreditor = Value("Deferred debt creditor")
    val FixedDebentureHolder = Value("Fixed debenture holder")
    val FloatingDebentureHolder = Value("Floating debenture holder")
    val InstrumentByWayOfSecurity = Value("Instrument by way of security")
    val Mortgage = Value("Mortgage")
    val OfficialAssigneeBasicIncome = Value("Official Assignee basic income")
    val OtherCreditorWithwithoutPOD = Value("Other creditor with/without POD")
    val PetitioningCreditorsCosts = Value("Petitioning creditors costs")
    val PreferentialUnsecuredCreditor = Value("Preferential unsecured creditor")
    val SecurityInterest = Value("Security Interest")
    val SupportingCreditorCosts = Value("Supporting Creditor Costs")
    val UnsecuredCreditorWithPOD = Value("Unsecured creditor with POD")
  }

  object ClaimStatus extends Enumeration {
    val Errored = Value("Errored")
    val Admitted = Value("Admitted")
    val Potential = Value("Potential")
    val Received = Value("Received")
    val Withdrawn = Value("Withdrawn")
    val Rejected = Value("Rejected")
    val Suspended = Value("Suspended")
    val Duplicate = Value("Duplicate")
  }

}

