/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.DataProtectionRuleRecord
import io.swagger.client.model.DataProtectionRuleSearchResults
import io.swagger.client.model.ErrorDescription
import io.swagger.client.model.RoleRecord
import io.swagger.client.model.RoleSearchResults
import io.swagger.client.model.UserGroupRecord
import io.swagger.client.model.UserGroupSearchResults
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object AuthorisationApi {

  /**
   * ### Overview              ****      **UC Mapping:**        ____    ### Pre-conditions    * User is authenticated    ____    ### Post-conditions    * Contact record is returned    * Audit record created    ____    ### Error messages    | Code| Message | Description|    |----|-----|------|    | **400** | Not authenticated | Bad request |    | **401** | Not authenticated  | User must be logged in to perform this action |    | **403** | Not authorised  | User not authorised to perform this action |    | **5XX** | System error  | System error |        ### HATEOAS \&quot;links\&quot; element examples    | Case \\# | Case | Description / Rules |    |----|-----|------|    | **1** | **201: Rule record returned** |    | 
   * 
   * Expected answers:
   *   code 200 : DataProtectionRuleRecord (The search results for the given provider search parameters.)
   *              Headers :
   *                api-business-govt-nz-Request-Id - MBIE Request id header
   *                api-business-govt-nz-Correlation-Id - MBIE Correlation id header
   *                date - Response parameter. Date/time the response was generated (in Greenwich mean time).
   *                service-version - The minor version of the API.
   *   code 400 : ErrorDescription (The combination of search enquiry parameters is invalid.)
   *   code 401 :  (The requester is not authenticated.)
   *   code 403 :  (The requester is not authorised for this operation.)
   *   code 500 : ErrorDescription (An unexpected internal server error occurred.)
   * 
   * Available security schemes:
   *   jwt (apiKey)
   * 
   * @param updatedDataProtectionRule 
   */
  def createDataProtectionRule(updatedDataProtectionRule: DataProtectionRuleRecord)(implicit apiKey: ApiKeyValue): ApiRequest[DataProtectionRuleRecord] =
    ApiRequest[DataProtectionRuleRecord](ApiMethods.POST, "https://virtserver.swaggerhub.com/apis/OASIS4-development/oasis4/1.4.13", "/data-protection-rules/new", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(updatedDataProtectionRule)
      .withSuccessResponse[DataProtectionRuleRecord](200)
      .withErrorResponse[ErrorDescription](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[ErrorDescription](500)
      
  object CreateDataProtectionRuleHeaders { 
    def apiBusinessGovtNzRequestId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Request-Id")
    def apiBusinessGovtNzCorrelationId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Correlation-Id")
    def date(r: ApiReturnWithHeaders) = r.getDateTimeHeader("date")
    def serviceVersion(r: ApiReturnWithHeaders) = r.getStringHeader("service-version")
  }
  /**
   * ### Overview              ****      **UC Mapping:**        ____    ### Pre-conditions    * User is authenticated    ____    ### Post-conditions    * Contact record is returned    * Audit record created    ____    ### Error messages    | Code| Message | Description|    |----|-----|------|    | **400** | Not authenticated | Bad request |    | **401** | Not authenticated  | User must be logged in to perform this action |    | **403** | Not authorised  | User not authorised to perform this action |    | **5XX** | System error  | System error |        ### HATEOAS \&quot;links\&quot; element examples    | Case \\# | Case | Description / Rules |    |----|-----|------|    | **1** | **201: Role record returned** |    | 
   * 
   * Expected answers:
   *   code 200 : RoleRecord (The search results for the given provider search parameters.)
   *              Headers :
   *                api-business-govt-nz-Request-Id - MBIE Request id header
   *                api-business-govt-nz-Correlation-Id - MBIE Correlation id header
   *                date - Response parameter. Date/time the response was generated (in Greenwich mean time).
   *                service-version - The minor version of the API.
   *   code 400 : ErrorDescription (The combination of search enquiry parameters is invalid.)
   *   code 401 :  (The requester is not authenticated.)
   *   code 403 :  (The requester is not authorised for this operation.)
   *   code 500 : ErrorDescription (An unexpected internal server error occurred.)
   * 
   * Available security schemes:
   *   jwt (apiKey)
   * 
   * @param roleId * The unique identifier for the role. 
   */
  def getRole(roleId: String)(implicit apiKey: ApiKeyValue): ApiRequest[RoleRecord] =
    ApiRequest[RoleRecord](ApiMethods.GET, "https://virtserver.swaggerhub.com/apis/OASIS4-development/oasis4/1.4.13", "/roles/{role-id}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withPathParam("role-id", roleId)
      .withSuccessResponse[RoleRecord](200)
      .withErrorResponse[ErrorDescription](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[ErrorDescription](500)
      
  object GetRoleHeaders { 
    def apiBusinessGovtNzRequestId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Request-Id")
    def apiBusinessGovtNzCorrelationId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Correlation-Id")
    def date(r: ApiReturnWithHeaders) = r.getDateTimeHeader("date")
    def serviceVersion(r: ApiReturnWithHeaders) = r.getStringHeader("service-version")
  }
  /**
   * ### Overview              ****      **UC Mapping:**        ____    ### Pre-conditions    * User is authenticated    ____    ### Post-conditions    * Contact record is returned    * Audit record created    ____    ### Error messages    | Code| Message | Description|    |----|-----|------|    | **400** | Not authenticated | Bad request |    | **401** | Not authenticated  | User must be logged in to perform this action |    | **403** | Not authorised  | User not authorised to perform this action |    | **5XX** | System error  | System error |        ### HATEOAS \&quot;links\&quot; element examples    | Case \\# | Case | Description / Rules |    |----|-----|------|    | **1** | **201: Role record returned** |    | 
   * 
   * Expected answers:
   *   code 200 : DataProtectionRuleRecord (The search results for the given provider search parameters.)
   *              Headers :
   *                api-business-govt-nz-Request-Id - MBIE Request id header
   *                api-business-govt-nz-Correlation-Id - MBIE Correlation id header
   *                date - Response parameter. Date/time the response was generated (in Greenwich mean time).
   *                service-version - The minor version of the API.
   *   code 400 : ErrorDescription (The combination of search enquiry parameters is invalid.)
   *   code 401 :  (The requester is not authenticated.)
   *   code 403 :  (The requester is not authorised for this operation.)
   *   code 500 : ErrorDescription (An unexpected internal server error occurred.)
   * 
   * Available security schemes:
   *   jwt (apiKey)
   * 
   * @param ruleId * The unique identifier for the role. 
   */
  def getRule(ruleId: String)(implicit apiKey: ApiKeyValue): ApiRequest[DataProtectionRuleRecord] =
    ApiRequest[DataProtectionRuleRecord](ApiMethods.GET, "https://virtserver.swaggerhub.com/apis/OASIS4-development/oasis4/1.4.13", "/data-protection-rules/{rule-id}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withPathParam("rule-id", ruleId)
      .withSuccessResponse[DataProtectionRuleRecord](200)
      .withErrorResponse[ErrorDescription](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[ErrorDescription](500)
      
  object GetRuleHeaders { 
    def apiBusinessGovtNzRequestId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Request-Id")
    def apiBusinessGovtNzCorrelationId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Correlation-Id")
    def date(r: ApiReturnWithHeaders) = r.getDateTimeHeader("date")
    def serviceVersion(r: ApiReturnWithHeaders) = r.getStringHeader("service-version")
  }
  /**
   * ### Overview              ****      **UC Mapping:**        ____    ### Pre-conditions    * User is authenticated    ____    ### Post-conditions    * Contact record is returned    * Audit record created    ____    ### Error messages    | Code| Message | Description|    |----|-----|------|    | **400** | Not authenticated | Bad request |    | **401** | Not authenticated  | User must be logged in to perform this action |    | **403** | Not authorised  | User not authorised to perform this action |    | **5XX** | System error  | System error |        ### HATEOAS \&quot;links\&quot; element examples    | Case \\# | Case | Description / Rules |    |----|-----|------|    | **1** | **201: user group record returned** |    | 
   * 
   * Expected answers:
   *   code 200 : UserGroupRecord (The search results for the given provider search parameters.)
   *              Headers :
   *                api-business-govt-nz-Request-Id - MBIE Request id header
   *                api-business-govt-nz-Correlation-Id - MBIE Correlation id header
   *                date - Response parameter. Date/time the response was generated (in Greenwich mean time).
   *                service-version - The minor version of the API.
   *   code 400 : ErrorDescription (The combination of search enquiry parameters is invalid.)
   *   code 401 :  (The requester is not authenticated.)
   *   code 403 :  (The requester is not authorised for this operation.)
   *   code 500 : ErrorDescription (An unexpected internal server error occurred.)
   * 
   * Available security schemes:
   *   jwt (apiKey)
   * 
   * @param userGroupId * The unique identifier for the role. 
   */
  def getUserGroup(userGroupId: String)(implicit apiKey: ApiKeyValue): ApiRequest[UserGroupRecord] =
    ApiRequest[UserGroupRecord](ApiMethods.GET, "https://virtserver.swaggerhub.com/apis/OASIS4-development/oasis4/1.4.13", "/user-groups/{user-group-id}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withPathParam("user-group-id", userGroupId)
      .withSuccessResponse[UserGroupRecord](200)
      .withErrorResponse[ErrorDescription](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[ErrorDescription](500)
      
  object GetUserGroupHeaders { 
    def apiBusinessGovtNzRequestId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Request-Id")
    def apiBusinessGovtNzCorrelationId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Correlation-Id")
    def date(r: ApiReturnWithHeaders) = r.getDateTimeHeader("date")
    def serviceVersion(r: ApiReturnWithHeaders) = r.getStringHeader("service-version")
  }
  /**
   * ### Overview              ****      **UC Mapping:**        ____    ### Pre-conditions    * User is authenticated    ____    ### Post-conditions    * Contact record is returned    * Audit record created    ____    ### Error messages    | Code| Message | Description|    |----|-----|------|    | **400** | Not authenticated | Bad request |    | **401** | Not authenticated  | User must be logged in to perform this action |    | **403** | Not authorised  | User not authorised to perform this action |    | **5XX** | System error  | System error |        ### HATEOAS \&quot;links\&quot; element examples    | Case \\# | Case | Description / Rules |    |----|-----|------|    | **1** | **201: Role record returned** |    | 
   * 
   * Expected answers:
   *   code 200 : DataProtectionRuleRecord (The search results for the given provider search parameters.)
   *              Headers :
   *                api-business-govt-nz-Request-Id - MBIE Request id header
   *                api-business-govt-nz-Correlation-Id - MBIE Correlation id header
   *                date - Response parameter. Date/time the response was generated (in Greenwich mean time).
   *                service-version - The minor version of the API.
   *   code 400 : ErrorDescription (The combination of search enquiry parameters is invalid.)
   *   code 401 :  (The requester is not authenticated.)
   *   code 403 :  (The requester is not authorised for this operation.)
   *   code 500 : ErrorDescription (An unexpected internal server error occurred.)
   * 
   * Available security schemes:
   *   jwt (apiKey)
   * 
   * @param ruleId * The unique identifier for the role. 
   * @param updatedDataProtectionRule 
   */
  def maintainDataProtectionRule(ruleId: String, updatedDataProtectionRule: DataProtectionRuleRecord)(implicit apiKey: ApiKeyValue): ApiRequest[DataProtectionRuleRecord] =
    ApiRequest[DataProtectionRuleRecord](ApiMethods.POST, "https://virtserver.swaggerhub.com/apis/OASIS4-development/oasis4/1.4.13", "/data-protection-rules/{rule-id}/maintain", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(updatedDataProtectionRule)
      .withPathParam("rule-id", ruleId)
      .withSuccessResponse[DataProtectionRuleRecord](200)
      .withErrorResponse[ErrorDescription](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[ErrorDescription](500)
      
  object MaintainDataProtectionRuleHeaders { 
    def apiBusinessGovtNzRequestId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Request-Id")
    def apiBusinessGovtNzCorrelationId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Correlation-Id")
    def date(r: ApiReturnWithHeaders) = r.getDateTimeHeader("date")
    def serviceVersion(r: ApiReturnWithHeaders) = r.getStringHeader("service-version")
  }
  /**
   * ### Overview              ****      **UC Mapping:**        ____    ### Pre-conditions    * User is authenticated    ____    ### Post-conditions    * Contact record is returned    * Audit record created    ____    ### Error messages    | Code| Message | Description|    |----|-----|------|    | **400** | Not authenticated | Bad request |    | **401** | Not authenticated  | User must be logged in to perform this action |    | **403** | Not authorised  | User not authorised to perform this action |    | **5XX** | System error  | System error |        ### HATEOAS \&quot;links\&quot; element examples    | Case \\# | Case | Description / Rules |    |----|-----|------|    | **1** | **201: Role record returned** |    | 
   * 
   * Expected answers:
   *   code 200 : RoleRecord (The search results for the given provider search parameters.)
   *              Headers :
   *                api-business-govt-nz-Request-Id - MBIE Request id header
   *                api-business-govt-nz-Correlation-Id - MBIE Correlation id header
   *                date - Response parameter. Date/time the response was generated (in Greenwich mean time).
   *                service-version - The minor version of the API.
   *   code 400 : ErrorDescription (The combination of search enquiry parameters is invalid.)
   *   code 401 :  (The requester is not authenticated.)
   *   code 403 :  (The requester is not authorised for this operation.)
   *   code 500 : ErrorDescription (An unexpected internal server error occurred.)
   * 
   * Available security schemes:
   *   jwt (apiKey)
   * 
   * @param roleId * The unique identifier for the role. 
   * @param updatedRole 
   */
  def maintainRole(roleId: String, updatedRole: RoleRecord)(implicit apiKey: ApiKeyValue): ApiRequest[RoleRecord] =
    ApiRequest[RoleRecord](ApiMethods.POST, "https://virtserver.swaggerhub.com/apis/OASIS4-development/oasis4/1.4.13", "/roles/{role-id}/maintain", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(updatedRole)
      .withPathParam("role-id", roleId)
      .withSuccessResponse[RoleRecord](200)
      .withErrorResponse[ErrorDescription](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[ErrorDescription](500)
      
  object MaintainRoleHeaders { 
    def apiBusinessGovtNzRequestId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Request-Id")
    def apiBusinessGovtNzCorrelationId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Correlation-Id")
    def date(r: ApiReturnWithHeaders) = r.getDateTimeHeader("date")
    def serviceVersion(r: ApiReturnWithHeaders) = r.getStringHeader("service-version")
  }
  /**
   * ### Overview              ****      **UC Mapping:**        ____    ### Pre-conditions    * User is authenticated    ____    ### Post-conditions    * Contact record is returned    * Audit record created    ____    ### Error messages    | Code| Message | Description|    |----|-----|------|    | **400** | Not authenticated | Bad request |    | **401** | Not authenticated  | User must be logged in to perform this action |    | **403** | Not authorised  | User not authorised to perform this action |    | **5XX** | System error  | System error |        ### HATEOAS \&quot;links\&quot; element examples    | Case \\# | Case | Description / Rules |    |----|-----|------|    | **1** | **201: User group record returned** |    | 
   * 
   * Expected answers:
   *   code 200 : UserGroupRecord (The search results for the given provider search parameters.)
   *              Headers :
   *                api-business-govt-nz-Request-Id - MBIE Request id header
   *                api-business-govt-nz-Correlation-Id - MBIE Correlation id header
   *                date - Response parameter. Date/time the response was generated (in Greenwich mean time).
   *                service-version - The minor version of the API.
   *   code 400 : ErrorDescription (The combination of search enquiry parameters is invalid.)
   *   code 401 :  (The requester is not authenticated.)
   *   code 403 :  (The requester is not authorised for this operation.)
   *   code 500 : ErrorDescription (An unexpected server error occured.)
   * 
   * Available security schemes:
   *   jwt (apiKey)
   * 
   * @param userGroupId * The unique identifier for the role. 
   * @param updatedDataProtectionRule 
   */
  def maintainRuleGroup(userGroupId: String, updatedDataProtectionRule: UserGroupRecord)(implicit apiKey: ApiKeyValue): ApiRequest[UserGroupRecord] =
    ApiRequest[UserGroupRecord](ApiMethods.POST, "https://virtserver.swaggerhub.com/apis/OASIS4-development/oasis4/1.4.13", "/user-groups/{user-group-id}/maintain", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(updatedDataProtectionRule)
      .withPathParam("user-group-id", userGroupId)
      .withSuccessResponse[UserGroupRecord](200)
      .withErrorResponse[ErrorDescription](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[ErrorDescription](500)
      
  object MaintainRuleGroupHeaders { 
    def apiBusinessGovtNzRequestId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Request-Id")
    def apiBusinessGovtNzCorrelationId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Correlation-Id")
    def date(r: ApiReturnWithHeaders) = r.getDateTimeHeader("date")
    def serviceVersion(r: ApiReturnWithHeaders) = r.getStringHeader("service-version")
  }
  /**
   * ### Overview              ****      **UC Mapping:**        ____    ### Pre-conditions    * User is authenticated    ____    ### Post-conditions    * Contact record is returned    * Audit record created    ____    ### Error messages    | Code| Message | Description|    |----|-----|------|    | **400** | Not authenticated | Bad request |    | **401** | Not authenticated  | User must be logged in to perform this action |    | **403** | Not authorised  | User not authorised to perform this action |    | **5XX** | System error  | System error |        ### HATEOAS \&quot;links\&quot; element examples    | Case \\# | Case | Description / Rules |    |----|-----|------|    | **1** | **201: Role record returned** |    | 
   * 
   * Expected answers:
   *   code 200 : RoleRecord (The search results for the given provider search parameters.)
   *              Headers :
   *                api-business-govt-nz-Request-Id - MBIE Request id header
   *                api-business-govt-nz-Correlation-Id - MBIE Correlation id header
   *                date - Response parameter. Date/time the response was generated (in Greenwich mean time).
   *                service-version - The minor version of the API.
   *   code 400 : ErrorDescription (The combination of search enquiry parameters is invalid.)
   *   code 401 :  (The requester is not authenticated.)
   *   code 403 :  (The requester is not authorised for this operation.)
   *   code 500 : ErrorDescription (An unexpected internal server error occurred.)
   * 
   * Available security schemes:
   *   jwt (apiKey)
   * 
   * @param roleRecord 
   */
  def newRole(roleRecord: RoleRecord)(implicit apiKey: ApiKeyValue): ApiRequest[RoleRecord] =
    ApiRequest[RoleRecord](ApiMethods.POST, "https://virtserver.swaggerhub.com/apis/OASIS4-development/oasis4/1.4.13", "/roles/new", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(roleRecord)
      .withSuccessResponse[RoleRecord](200)
      .withErrorResponse[ErrorDescription](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[ErrorDescription](500)
      
  object NewRoleHeaders { 
    def apiBusinessGovtNzRequestId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Request-Id")
    def apiBusinessGovtNzCorrelationId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Correlation-Id")
    def date(r: ApiReturnWithHeaders) = r.getDateTimeHeader("date")
    def serviceVersion(r: ApiReturnWithHeaders) = r.getStringHeader("service-version")
  }
  /**
   * ### Overview              ****      **UC Mapping:**        ____    ### Pre-conditions    * User is authenticated    ____    ### Post-conditions    * Contact record is returned    * Audit record created    ____    ### Error messages    | Code| Message | Description|    |----|-----|------|    | **400** | Not authenticated | Bad request |    | **401** | Not authenticated  | User must be logged in to perform this action |    | **403** | Not authorised  | User not authorised to perform this action |    | **5XX** | System error  | System error |        ### HATEOAS \&quot;links\&quot; element examples    | Case \\# | Case | Description / Rules |    |----|-----|------|    | **1** | **201: New user group** |    | 
   * 
   * Expected answers:
   *   code 200 : UserGroupRecord (The search results for the given provider search parameters.)
   *              Headers :
   *                api-business-govt-nz-Request-Id - MBIE Request id header
   *                api-business-govt-nz-Correlation-Id - MBIE Correlation id header
   *                date - Response parameter. Date/time the response was generated (in Greenwich mean time).
   *                service-version - The minor version of the API.
   *   code 400 : ErrorDescription (The combination of search enquiry parameters is invalid.)
   *   code 401 :  (The requester is not authenticated.)
   *   code 403 :  (The requester is not authorised for this operation.)
   *   code 500 : ErrorDescription (An unexpected internal server error occurred.)
   * 
   * Available security schemes:
   *   jwt (apiKey)
   * 
   * @param updatedDataProtectionRule 
   */
  def newRuleGroup(updatedDataProtectionRule: UserGroupRecord)(implicit apiKey: ApiKeyValue): ApiRequest[UserGroupRecord] =
    ApiRequest[UserGroupRecord](ApiMethods.POST, "https://virtserver.swaggerhub.com/apis/OASIS4-development/oasis4/1.4.13", "/user-groups/new", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(updatedDataProtectionRule)
      .withSuccessResponse[UserGroupRecord](200)
      .withErrorResponse[ErrorDescription](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[ErrorDescription](500)
      
  object NewRuleGroupHeaders { 
    def apiBusinessGovtNzRequestId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Request-Id")
    def apiBusinessGovtNzCorrelationId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Correlation-Id")
    def date(r: ApiReturnWithHeaders) = r.getDateTimeHeader("date")
    def serviceVersion(r: ApiReturnWithHeaders) = r.getStringHeader("service-version")
  }
  /**
   * ### Overview     Retrieves a search result of roles available to the contact      ____    **UC Mapping:**      ____   ### Pre-conditions   * User is authenticated   ____   ### Post-conditions   * Search result is returned    ____   ### Error messages   | Code| Message | Description|   |----|-----|------|   | **400** | Not authenticated | Bad request |   | **401** | Not authenticated  | User must be logged in to perform this action |   | **403** | Not authorised  | User not authorised to perform this action |   | **5XX** | System error  | System error |      ### HATEOAS \&quot;links\&quot; element examples   | Case \\# | Case | Description / rules |   |----|-----|------|   | **1** | **201: OK** | Search result |      ### Links          Placeholder    
   * 
   * Expected answers:
   *   code 200 : RoleSearchResults (The search results for the given provider search parameters.)
   *              Headers :
   *                api-business-govt-nz-Request-Id - MBIE Request id header
   *                api-business-govt-nz-Correlation-Id - MBIE Correlation id header
   *                date - Response parameter. Date/time the response was generated (in Greenwich mean time).
   *                service-version - The minor version of the API.
   *   code 400 : ErrorDescription (The combination of search enquiry parameters is invalid.)
   *   code 401 :  (The requester is not authenticated.)
   *   code 403 :  (The requester is not authorised for this operation.)
   *   code 500 : ErrorDescription (An unexpected internal server error occurred.)
   * 
   * Available security schemes:
   *   jwt (apiKey)
   * 
   * @param roleCode * The unique identifier for the contact. 
   */
  def searchRoles(roleCode: String)(implicit apiKey: ApiKeyValue): ApiRequest[RoleSearchResults] =
    ApiRequest[RoleSearchResults](ApiMethods.GET, "https://virtserver.swaggerhub.com/apis/OASIS4-development/oasis4/1.4.13", "/roles/search", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withQueryParam("role-code", roleCode)
      .withSuccessResponse[RoleSearchResults](200)
      .withErrorResponse[ErrorDescription](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[ErrorDescription](500)
      
  object SearchRolesHeaders { 
    def apiBusinessGovtNzRequestId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Request-Id")
    def apiBusinessGovtNzCorrelationId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Correlation-Id")
    def date(r: ApiReturnWithHeaders) = r.getDateTimeHeader("date")
    def serviceVersion(r: ApiReturnWithHeaders) = r.getStringHeader("service-version")
  }
  /**
   * ### Overview     Retrieves a search result of roles available to the contact      ____    **UC Mapping:**      ____   ### Pre-conditions   * User is authenticated   ____   ### Post-conditions   * Search result is returned    ____   ### Error messages   | Code| Message | Description|   |----|-----|------|   | **400** | Not authenticated | Bad request |   | **401** | Not authenticated  | User must be logged in to perform this action |   | **403** | Not authorised  | User not authorised to perform this action |   | **5XX** | System error  | System error |      ### HATEOAS \&quot;links\&quot; element examples   | Case \\# | Case | Description / rules |   |----|-----|------|   | **1** | **201: OK** | Search result |      ### Links          Placeholder    
   * 
   * Expected answers:
   *   code 200 : DataProtectionRuleSearchResults (The search results for the given provider search parameters.)
   *              Headers :
   *                api-business-govt-nz-Request-Id - MBIE Request id header
   *                api-business-govt-nz-Correlation-Id - MBIE Correlation id header
   *                date - Response parameter. Date/time the response was generated (in Greenwich mean time).
   *                service-version - The minor version of the API.
   *   code 400 : ErrorDescription (The combination of search enquiry parameters is invalid.)
   *   code 401 :  (The requester is not authenticated.)
   *   code 403 :  (The requester is not authorised for this operation.)
   *   code 500 : ErrorDescription (An unexpected internal server error occurred.)
   * 
   * Available security schemes:
   *   jwt (apiKey)
   * 
   * @param roleCode * The unique identifier for the contact. 
   */
  def searchRules(roleCode: String)(implicit apiKey: ApiKeyValue): ApiRequest[DataProtectionRuleSearchResults] =
    ApiRequest[DataProtectionRuleSearchResults](ApiMethods.GET, "https://virtserver.swaggerhub.com/apis/OASIS4-development/oasis4/1.4.13", "/data-protection-rules/search", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withQueryParam("role-code", roleCode)
      .withSuccessResponse[DataProtectionRuleSearchResults](200)
      .withErrorResponse[ErrorDescription](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[ErrorDescription](500)
      
  object SearchRulesHeaders { 
    def apiBusinessGovtNzRequestId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Request-Id")
    def apiBusinessGovtNzCorrelationId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Correlation-Id")
    def date(r: ApiReturnWithHeaders) = r.getDateTimeHeader("date")
    def serviceVersion(r: ApiReturnWithHeaders) = r.getStringHeader("service-version")
  }
  /**
   * ### Overview     Retrieves a search result of roles available to the contact      ____    **UC Mapping:**      ____   ### Pre-conditions   * User is authenticated   ____   ### Post-conditions   * Search result is returned    ____   ### Error messages   | Code| Message | Description|   |----|-----|------|   | **400** | Not authenticated | Bad request |   | **401** | Not authenticated  | User must be logged in to perform this action |   | **403** | Not authorised  | User not authorised to perform this action |   | **5XX** | System error  | System error |      ### HATEOAS \&quot;links\&quot; element examples   | Case \\# | Case | Description / rules |   |----|-----|------|   | **1** | **201: OK** | Search result |      ### Links          Placeholder    
   * 
   * Expected answers:
   *   code 200 : UserGroupSearchResults (The search results for the given provider search parameters.)
   *              Headers :
   *                api-business-govt-nz-Request-Id - MBIE Request id header
   *                api-business-govt-nz-Correlation-Id - MBIE Correlation id header
   *                date - Response parameter. Date/time the response was generated (in Greenwich mean time).
   *                service-version - The minor version of the API.
   *   code 400 : ErrorDescription (The combination of search enquiry parameters is invalid.)
   *   code 401 :  (The requester is not authenticated.)
   *   code 403 :  (The requester is not authorised for this operation.)
   *   code 500 : ErrorDescription (An unexpected internal server error occurred.)
   * 
   * Available security schemes:
   *   jwt (apiKey)
   * 
   * @param groupCode *  
   */
  def searchUserGroups(groupCode: String)(implicit apiKey: ApiKeyValue): ApiRequest[UserGroupSearchResults] =
    ApiRequest[UserGroupSearchResults](ApiMethods.GET, "https://virtserver.swaggerhub.com/apis/OASIS4-development/oasis4/1.4.13", "/user-groups/search", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withQueryParam("group-code", groupCode)
      .withSuccessResponse[UserGroupSearchResults](200)
      .withErrorResponse[ErrorDescription](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[ErrorDescription](500)
      
  object SearchUserGroupsHeaders { 
    def apiBusinessGovtNzRequestId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Request-Id")
    def apiBusinessGovtNzCorrelationId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Correlation-Id")
    def date(r: ApiReturnWithHeaders) = r.getDateTimeHeader("date")
    def serviceVersion(r: ApiReturnWithHeaders) = r.getStringHeader("service-version")
  }


}

