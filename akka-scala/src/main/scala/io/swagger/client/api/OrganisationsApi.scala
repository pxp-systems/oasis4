/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.ContactSearchResults
import io.swagger.client.model.CreditorClaimSearchResults
import io.swagger.client.model.ErrorDescription
import io.swagger.client.model.OrganisationRecord
import io.swagger.client.model.PlaceHolderModel
import io.swagger.client.model.RoleRecord
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object OrganisationsApi {

  /**
   * ### Overview              ****      **UC Mapping:**        ____    ### Pre-conditions    * User is authenticated    ____    ### Post-conditions    * Org record is returned    * Audit record created    ____    ### Error messages    | Code| Message | Description|    |----|-----|------|    | **400** | Not authenticated | Bad request |    | **401** | Not authenticated  | User must be logged in to perform this action |    | **403** | Not authorised  | User not authorised to perform this action |    | **5XX** | System error  | System error |        ### HATEOAS \&quot;links\&quot; element examples    | Case \\# | Case | Description / Rules |    |----|-----|------|    | **1** | **201: Org record returned** |    | 
   * 
   * Expected answers:
   *   code 200 : OrganisationRecord (The search results for the given provider search parameters.)
   *              Headers :
   *                api-business-govt-nz-Request-Id - MBIE Request id header
   *                api-business-govt-nz-Correlation-Id - MBIE Correlation id header
   *                date - Response parameter. Date/time the response was generated (in Greenwich mean time).
   *                service-version - The minor version of the API.
   *   code 400 : ErrorDescription (The combination of search enquiry parameters is invalid.)
   *   code 401 :  (The requester is not authenticated.)
   *   code 403 :  (The requester is not authorised for this operation.)
   *   code 500 : ErrorDescription (An unexpected internal server error occurred.)
   * 
   * Available security schemes:
   *   jwt (apiKey)
   * 
   * @param orgId * The unique identifier for the role. 
   */
  def getOrg(orgId: String)(implicit apiKey: ApiKeyValue): ApiRequest[OrganisationRecord] =
    ApiRequest[OrganisationRecord](ApiMethods.GET, "https://virtserver.swaggerhub.com/apis/OASIS4-development/oasis4/1.4.13", "/organisations/{org-id}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withPathParam("org-id", orgId)
      .withSuccessResponse[OrganisationRecord](200)
      .withErrorResponse[ErrorDescription](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[ErrorDescription](500)
      
  object GetOrgHeaders { 
    def apiBusinessGovtNzRequestId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Request-Id")
    def apiBusinessGovtNzCorrelationId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Correlation-Id")
    def date(r: ApiReturnWithHeaders) = r.getDateTimeHeader("date")
    def serviceVersion(r: ApiReturnWithHeaders) = r.getStringHeader("service-version")
  }
  /**
   * ### Overview              ****      **UC Mapping:**        ____    ### Pre-conditions    * User is authenticated    ____    ### Post-conditions    * Contact record is returned    * Audit record created    ____    ### Error messages    | Code| Message | Description|    |----|-----|------|    | **400** | Not authenticated | Bad request |    | **401** | Not authenticated  | User must be logged in to perform this action |    | **403** | Not authorised  | User not authorised to perform this action |    | **5XX** | System error  | System error |        ### HATEOAS \&quot;links\&quot; element examples    | Case \\# | Case | Description / Rules |    |----|-----|------|    | **1** | **201: Org record returned** |    | 
   * 
   * Expected answers:
   *   code 200 : CreditorClaimSearchResults (The search results for the given provider search parameters.)
   *              Headers :
   *                api-business-govt-nz-Request-Id - MBIE Request id header
   *                api-business-govt-nz-Correlation-Id - MBIE Correlation id header
   *                date - Response parameter. Date/time the response was generated (in Greenwich mean time).
   *                service-version - The minor version of the API.
   *   code 400 : ErrorDescription (The combination of search enquiry parameters is invalid.)
   *   code 401 :  (The requester is not authenticated.)
   *   code 403 :  (The requester is not authorised for this operation.)
   *   code 500 : ErrorDescription (An unexpected internal server error occurred.)
   * 
   * Available security schemes:
   *   jwt (apiKey)
   * 
   * @param orgId * The unique identifier for the organisation. 
   * @param estateName A.k.a. debtor name - search on the name of the insolvent party.
   * @param claimValueFrom Min value &gt;&#x3D;
   * @param claimValueTo Max value &lt;&#x3D;
   * @param onlyMyClaims Boolean for use with organisations (key creditors) - applies search criteria to show only those claims made by the logged in user.
   * @param claimType The type of the claim. Mapping as follows  | Enum | Claim-type | |----|-----| | Bankrupt | NA - won&#39;t appear | | Chattel Security | Secured  | | Contributory | NA - won&#39;t appear | | Debenture interest | Secured  | | Deferred debt creditor | Secured  | | Fixed debenture holder | Secured  | | Floating debenture holder | Secured  | | Instrument by way of security | Secured  | | Mortgage | Secured  | | Official Assignee basic income | NA - won&#39;t appear | | Other creditor with/without POD | Unsecured  | | Petitioning creditor\\&#39;s costs | Application costs | | Preferential unsecured creditor | Preferrential | | Security Interest | Secured  | | Supporting Creditor Costs|  Application costs | | Unsecured creditor with POD | Unsecured  | 
   * @param estateType The type of the claim
   * @param fromDate The date from which to search e.g 04-Dec-2017
   * @param toDate The date to which to search e.g. 07-Dec-2017
   * @param creditorReference The creditors reference identifier.
   * @param estateNumber The estate that the claim belongs to.
   * @param claimStatus The state of the insolvency procedure, leave blank for all
   * @param page The page in the collection to return. Default is page 1.
   * @param pageSize The requested number of items to include in each page returned. Default is 20. 
   * @param sortOrder The order to sort the collection in. Can be &#39;asc&#39; or &#39;desc&#39;.
   * @param sortBy The property to sort the collection by.
   */
  def getOrgClaims(orgId: String, estateName: Option[String] = None, claimValueFrom: Option[Double] = None, claimValueTo: Option[Double] = None, onlyMyClaims: Option[Boolean] = None, claimType: Option[String] = None, estateType: Option[String] = None, fromDate: Option[String] = None, toDate: Option[String] = None, creditorReference: Option[String] = None, estateNumber: Option[String] = None, claimStatus: Option[String] = None, page: Option[Int], pageSize: Option[Int], sortOrder: Option[String], sortBy: Option[String])(implicit apiKey: ApiKeyValue): ApiRequest[CreditorClaimSearchResults] =
    ApiRequest[CreditorClaimSearchResults](ApiMethods.GET, "https://virtserver.swaggerhub.com/apis/OASIS4-development/oasis4/1.4.13", "/organisations/{org-id}/creditor-claims", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withQueryParam("estate-name", estateName)
      .withQueryParam("claim-value-from", claimValueFrom)
      .withQueryParam("claim-value-to", claimValueTo)
      .withQueryParam("only-my-claims", onlyMyClaims)
      .withQueryParam("claim-type", claimType)
      .withQueryParam("estate-type", estateType)
      .withQueryParam("from-date", fromDate)
      .withQueryParam("to-date", toDate)
      .withQueryParam("creditor-reference", creditorReference)
      .withQueryParam("estate-number", estateNumber)
      .withQueryParam("claim-status", claimStatus)
      .withQueryParam("page", page)
      .withQueryParam("page-size", pageSize)
      .withQueryParam("sort-order", sortOrder)
      .withQueryParam("sort-by", sortBy)
      .withPathParam("org-id", orgId)
      .withSuccessResponse[CreditorClaimSearchResults](200)
      .withErrorResponse[ErrorDescription](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[ErrorDescription](500)
      
  object GetOrgClaimsHeaders { 
    def apiBusinessGovtNzRequestId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Request-Id")
    def apiBusinessGovtNzCorrelationId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Correlation-Id")
    def date(r: ApiReturnWithHeaders) = r.getDateTimeHeader("date")
    def serviceVersion(r: ApiReturnWithHeaders) = r.getStringHeader("service-version")
  }
  /**
   * ### Overview              ****      **UC Mapping:**        ____    ### Pre-conditions    * User is authenticated    ____    ### Post-conditions    * Org record is returned    * Audit record created    ____    ### Error messages    | Code| Message | Description|    |----|-----|------|    | **400** | Not authenticated | Bad request |    | **401** | Not authenticated  | User must be logged in to perform this action |    | **403** | Not authorised  | User not authorised to perform this action |    | **5XX** | System error  | System error |        ### HATEOAS \&quot;links\&quot; element examples    | Case \\# | Case | Description / Rules |    |----|-----|------|    | **1** | **201: Org record returned** |    | 
   * 
   * Expected answers:
   *   code 200 : ContactSearchResults (The search results for the given provider search parameters.)
   *              Headers :
   *                api-business-govt-nz-Request-Id - MBIE Request id header
   *                api-business-govt-nz-Correlation-Id - MBIE Correlation id header
   *                date - Response parameter. Date/time the response was generated (in Greenwich mean time).
   *                service-version - The minor version of the API.
   *   code 400 : ErrorDescription (The combination of search enquiry parameters is invalid.)
   *   code 401 :  (The requester is not authenticated.)
   *   code 403 :  (The requester is not authorised for this operation.)
   *   code 500 : ErrorDescription (An unexpected internal server error occurred.)
   * 
   * Available security schemes:
   *   jwt (apiKey)
   * 
   * @param orgId * The unique identifier for the organision. 
   */
  def getOrgContacts(orgId: String)(implicit apiKey: ApiKeyValue): ApiRequest[ContactSearchResults] =
    ApiRequest[ContactSearchResults](ApiMethods.GET, "https://virtserver.swaggerhub.com/apis/OASIS4-development/oasis4/1.4.13", "/organisations/{org-id}/contacts", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withPathParam("org-id", orgId)
      .withSuccessResponse[ContactSearchResults](200)
      .withErrorResponse[ErrorDescription](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[ErrorDescription](500)
      
  object GetOrgContactsHeaders { 
    def apiBusinessGovtNzRequestId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Request-Id")
    def apiBusinessGovtNzCorrelationId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Correlation-Id")
    def date(r: ApiReturnWithHeaders) = r.getDateTimeHeader("date")
    def serviceVersion(r: ApiReturnWithHeaders) = r.getStringHeader("service-version")
  }
  /**
   * ### Overview         ****      **UC Mapping:**        ____    ### Pre-conditions    * User is authenticated    ____    ### Post-conditions    * Contact record is returned    * Audit record created    ____    ### Error messages    | Code| Message | Description|    |----|-----|------|    | **400** | Not authenticated | Bad request |    | **401** | Not authenticated  | User must be logged in to perform this action |    | **403** | Not authorised  | User not authorised to perform this action |    | **5XX** | System error  | System error |        ### HATEOAS \&quot;links\&quot; element examples    | Case \\# | Case | Description / Rules |    |----|-----|------|    | **1** | **201: Org record returned** |    | 
   * 
   * Expected answers:
   *   code 200 : RoleRecord (The search results for the given provider search parameters.)
   *              Headers :
   *                api-business-govt-nz-Request-Id - MBIE Request id header
   *                api-business-govt-nz-Correlation-Id - MBIE Correlation id header
   *                date - Response parameter. Date/time the response was generated (in Greenwich mean time).
   *                service-version - The minor version of the API.
   *   code 400 : ErrorDescription (The combination of search enquiry parameters is invalid.)
   *   code 401 :  (The requester is not authenticated.)
   *   code 403 :  (The requester is not authorised for this operation.)
   *   code 500 : ErrorDescription (An unexpected internal server error occurred.)
   * 
   * Available security schemes:
   *   jwt (apiKey)
   * 
   * @param orgId * The unique identifier for the organisation. 
   * @param updatedRole 
   */
  def maintainOrg(orgId: String, updatedRole: OrganisationRecord)(implicit apiKey: ApiKeyValue): ApiRequest[RoleRecord] =
    ApiRequest[RoleRecord](ApiMethods.POST, "https://virtserver.swaggerhub.com/apis/OASIS4-development/oasis4/1.4.13", "/organisations/{org-id}/maintain", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(updatedRole)
      .withPathParam("org-id", orgId)
      .withSuccessResponse[RoleRecord](200)
      .withErrorResponse[ErrorDescription](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[ErrorDescription](500)
      
  object MaintainOrgHeaders { 
    def apiBusinessGovtNzRequestId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Request-Id")
    def apiBusinessGovtNzCorrelationId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Correlation-Id")
    def date(r: ApiReturnWithHeaders) = r.getDateTimeHeader("date")
    def serviceVersion(r: ApiReturnWithHeaders) = r.getStringHeader("service-version")
  }
  /**
   * ### Overview              ****      **UC Mapping:**        ____    ### Pre-conditions    * User is authenticated    ____    ### Post-conditions    * Org record is returned    * Audit record created    ____    ### Error messages    | Code| Message | Description|    |----|-----|------|    | **400** | Not authenticated | Bad request |    | **401** | Not authenticated  | User must be logged in to perform this action |    | **403** | Not authorised  | User not authorised to perform this action |    | **5XX** | System error  | System error |        ### HATEOAS \&quot;links\&quot; element examples    | Case \\# | Case | Description / Rules |    |----|-----|------|    | **1** | **201: Org record returned** |    | 
   * 
   * Expected answers:
   *   code 200 : OrganisationRecord (The search results for the given provider search parameters.)
   *              Headers :
   *                api-business-govt-nz-Request-Id - MBIE Request id header
   *                api-business-govt-nz-Correlation-Id - MBIE Correlation id header
   *                date - Response parameter. Date/time the response was generated (in Greenwich mean time).
   *                service-version - The minor version of the API.
   *   code 400 : ErrorDescription (The combination of search enquiry parameters is invalid.)
   *   code 401 :  (The requester is not authenticated.)
   *   code 403 :  (The requester is not authorised for this operation.)
   *   code 500 : ErrorDescription (An unexpected internal server error occurred.)
   * 
   * Available security schemes:
   *   jwt (apiKey)
   * 
   * @param orgRecord 
   */
  def newOrg(orgRecord: OrganisationRecord)(implicit apiKey: ApiKeyValue): ApiRequest[OrganisationRecord] =
    ApiRequest[OrganisationRecord](ApiMethods.POST, "https://virtserver.swaggerhub.com/apis/OASIS4-development/oasis4/1.4.13", "/organisations/new", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(orgRecord)
      .withSuccessResponse[OrganisationRecord](200)
      .withErrorResponse[ErrorDescription](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[ErrorDescription](500)
      
  object NewOrgHeaders { 
    def apiBusinessGovtNzRequestId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Request-Id")
    def apiBusinessGovtNzCorrelationId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Correlation-Id")
    def date(r: ApiReturnWithHeaders) = r.getDateTimeHeader("date")
    def serviceVersion(r: ApiReturnWithHeaders) = r.getStringHeader("service-version")
  }
  /**
   * ### Overview     Retrieves a search result of organisations available to the for internal users of the application      ____    **UC Mapping:**      ____   ### Pre-conditions   * User is authenticated   ____   ### Post-conditions   * Search result is returned    ____   ### Error messages   | Code| Message | Description|   |----|-----|------|   | **400** | Not authenticated | Bad request |   | **401** | Not authenticated  | User must be logged in to perform this action |   | **403** | Not authorised  | User not authorised to perform this action |   | **5XX** | System error  | System error |      ### HATEOAS \&quot;links\&quot; element examples   | Case \\# | Case | Description / rules |   |----|-----|------|   | **1** | **201: OK** | Org search result |      ### Links          Placeholder    
   * 
   * Expected answers:
   *   code 200 : PlaceHolderModel (The search results for the given provider search parameters.)
   *              Headers :
   *                api-business-govt-nz-Request-Id - MBIE Request id header
   *                api-business-govt-nz-Correlation-Id - MBIE Correlation id header
   *                date - Response parameter. Date/time the response was generated (in Greenwich mean time).
   *                service-version - The minor version of the API.
   *   code 400 : ErrorDescription (The combination of search enquiry parameters is invalid.)
   *   code 401 :  (The requester is not authenticated.)
   *   code 403 :  (The requester is not authorised for this operation.)
   *   code 500 : ErrorDescription (An unexpected internal server error occurred.)
   * 
   * Available security schemes:
   *   jwt (apiKey)
   * 
   * @param organsationName * The name of the organisation. 
   * @param organsationId * The unique id of the organisation. 
   */
  def searchOrgs(organsationName: Option[String] = None, organsationId: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[PlaceHolderModel] =
    ApiRequest[PlaceHolderModel](ApiMethods.GET, "https://virtserver.swaggerhub.com/apis/OASIS4-development/oasis4/1.4.13", "/organisations/search", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withQueryParam("organsation-name", organsationName)
      .withQueryParam("organsation-id", organsationId)
      .withSuccessResponse[PlaceHolderModel](200)
      .withErrorResponse[ErrorDescription](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[ErrorDescription](500)
      
  object SearchOrgsHeaders { 
    def apiBusinessGovtNzRequestId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Request-Id")
    def apiBusinessGovtNzCorrelationId(r: ApiReturnWithHeaders) = r.getStringHeader("api-business-govt-nz-Correlation-Id")
    def date(r: ApiReturnWithHeaders) = r.getDateTimeHeader("date")
    def serviceVersion(r: ApiReturnWithHeaders) = r.getStringHeader("service-version")
  }


}

